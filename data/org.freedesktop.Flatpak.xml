<!DOCTYPE node PUBLIC
"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">

<!--
 Copyright (C) 2015 Red Hat, Inc.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General
 Public License along with this library; if not, write to the
 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 Boston, MA 02110-1301, USA.

 Author: Alexander Larsson <alexl@redhat.com>
-->

<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
  <interface name='org.freedesktop.Flatpak.SessionHelper'>
    <property name="version" type="u" access="read"/>

    <method name="RequestMonitor">
      <arg type='ay' name='path' direction='out'/>
    </method>

    <method name="RequestSession">
      <arg type='a{sv}' name='data' direction='out'/>
    </method>
  </interface>

  <interface name='org.freedesktop.Flatpak.Development'>
    <property name="version" type="u" access="read"/>

    <!-- This methods let you start processes, sandboxed or not on the
         host, so its not generally safe to allow access to it to any
         application. However, at times it is very useful to be able
         to do this. For instance for developer tools this lets you
         build flatpaks from inside a flatpak. -->
    <method name="HostCommand">
      <arg type='ay' name='cwd_path' direction='in'/>
      <arg type='aay' name='argv' direction='in'/>
      <arg type='a{uh}' name='fds' direction='in'/>
      <arg type='a{ss}' name='envs' direction='in'/>
      <arg type='u' name='flags' direction='in'/>
      <arg type='u' name='pid' direction='out'/>
    </method>
    <method name="HostCommandSignal">
      <arg type='u' name='pid' direction='in'/>
      <arg type='u' name='signal' direction='in'/>
      <arg type='b' name='to_process_group' direction='in'/>
    </method>
    <signal name="HostCommandExited">
      <arg type='u' name='pid' direction='out'/>
      <arg type='u' name='exit_status' direction='out'/>
    </signal>

  </interface>

  <interface name='org.freedesktop.Flatpak.SystemHelper'>
    <property name="version" type="u" access="read"/>

    <method name="Deploy">
      <arg type='ay' name='repo_path' direction='in'/>
      <arg type='u' name='flags' direction='in'/>
      <arg type='s' name='ref' direction='in'/>
      <arg type='s' name='origin' direction='in'/>
      <arg type='as' name='subpaths' direction='in'/>
      <arg type='s' name='installation' direction='in'/>
    </method>

    <method name="DeployAppstream">
      <arg type='ay' name='repo_path' direction='in'/>
      <arg type='u' name='flags' direction='in'/>
      <arg type='s' name='origin' direction='in'/>
      <arg type='s' name='arch' direction='in'/>
      <arg type='s' name='installation' direction='in'/>
    </method>

    <method name="Uninstall">
      <arg type='u' name='flags' direction='in'/>
      <arg type='s' name='ref' direction='in'/>
      <arg type='s' name='installation' direction='in'/>
    </method>

    <method name="InstallBundle">
      <arg type='ay' name='bundle_path' direction='in'/>
      <arg type='u' name='flags' direction='in'/>
      <arg type='s' name='remote' direction='in'/>
      <arg type='s' name='installation' direction='in'/>
      <arg type='s' name='ref' direction='out'/>
    </method>

    <method name="ConfigureRemote">
      <arg type='u' name='flags' direction='in'/>
      <arg type='s' name='remote' direction='in'/>
      <arg type='s' name='config' direction='in'/>
      <arg type='ay' name='gpg_key' direction='in'>
        <annotation name="org.gtk.GDBus.C.ForceGVariant" value="true"/>
      </arg>
      <arg type='s' name='installation' direction='in'/>
    </method>

    <method name="Configure">
      <arg type='u' name='flags' direction='in'/>
      <arg type='s' name='key' direction='in'/>
      <arg type='s' name='value' direction='in'/>
      <arg type='s' name='installation' direction='in'/>
    </method>

    <method name="UpdateRemote">
      <arg type='u' name='flags' direction='in'/>
      <arg type='s' name='remote' direction='in'/>
      <arg type='s' name='installation' direction='in'/>
      <arg type='ay' name='summary_path' direction='in'/>
      <arg type='ay' name='summary_sig_path' direction='in'/>
    </method>

    <method name="RemoveLocalRef">
      <arg type='u' name='flags' direction='in'/>
      <arg type='s' name='remote' direction='in'/>
      <arg type='s' name='ref' direction='in'/>
      <arg type='s' name='installation' direction='in'/>
    </method>

    <method name="PruneLocalRepo">
      <arg type='u' name='flags' direction='in'/>
      <arg type='s' name='installation' direction='in'/>
    </method>

    <method name="RunTriggers">
      <arg type='u' name='flags' direction='in'/>
      <arg type='s' name='installation' direction='in'/>
    </method>

    <method name="EnsureRepo">
      <arg type='u' name='flags' direction='in'/>
      <arg type='s' name='installation' direction='in'/>
    </method>

    <method name="UpdateSummary">
      <arg type='u' name='flags' direction='in'/>
      <arg type='s' name='installation' direction='in'/>
    </method>

    <method name="GenerateOciSummary">
      <arg type='u' name='flags' direction='in'/>
      <arg type='s' name='origin' direction='in'/>
      <arg type='s' name='installation' direction='in'/>
    </method>

    <!-- This methods provides a child repo to the client which can be pulled in
         the system's repo. The child repo resides inside a cache directory,
         which gets mounted with bindfs so that the client(unprivileged)
         can write to it as long as the mount exists. We do this because
         it  enables the client to do a child pull at a location (currently repo/tmp)
         which can be hardlinked during Deploy and avoid the temporary requirement
         of double disk-space usage.

         The expected call sequence is either of the following:
         * GetChildRepoForPull -> Deploy
         * GetChildRepoForPull -> CancelPull (in case an ongoing pull has to be cancelled)

         This method can recover old partial pulls which might be failed due to various reasons.
         In that case, the call sequence probably is:
         * GetChildRepoForPull -> <failure occured> -> GetChildRepoForPull (partial pull recovered)
    -->
    <method name="GetChildRepoForPull">
      <arg type='s' name='ref' direction='in'/>
      <arg type='s' name='commit' direction='in'/>
      <arg type='s' name='installation' direction='in'/>
      <arg type='s' name='repo_path' direction='out'/>
    </method>

    <!-- This method cancels an ongoing pull at repo_path. The cancellation triggered
         by the client helps to cleanup the bindfs mount setup -->
    <method name="CancelPull">
      <arg type='s' name='installation' direction='in'/>
      <arg type='s' name='repo_path' direction='in'/>
    </method>

  </interface>

</node>
